#include <iostream>
#include <vector>

using namespace std;

typedef vector<vector<bool> > map_t;
typedef pair<int,int> point;

void input(int,int,map_t&);
bool dfs_start (int T,map_t& init);

point S,D;

int main(){
	ios::sync_with_stdio(false);
	int M,N,T;
	while (cin>>M>>N>>T && M!=0 && N!=0 && T!=0){
		map_t board;

		board.resize(M);
		for (auto &i:board) i.resize(N);

		input(M,N,board);

		cout<<(dfs_start(T,board)?"YES":"NO")<<endl;

	}
}

bool dfs (int x,int y,int T,map_t& cur){
	const int dx[]={-1,0,1,0};
	const int dy[]={0,1,0,-1};
	bool ret=false;

	if (x==D.first && y==D.second && T==0) return true;
	else if (T==0) return false;

	cur[x][y]=false;

	for (int i=0;i<4 && !ret;i++){
		if (x+dx[i]<cur.size() && x+dx[i]>=0
		&& y+dy[i]<cur[x].size() && y+dy[i]>=0
		&& cur[x+dx[i]][y+dy[i]]){
			ret |= dfs(x+dx[i],y+dy[i],T-1,cur);
		}
	}

	cur[x][y]=true;

	return ret;
}

bool dfs_start (int T,map_t& init){
	return dfs(S.first,S.second,T,init);
}

void input(int M,int N,map_t& board){
	for (int i=0;i<M;i++){
		for (int j=0;j<N;j++){
			char t;
			cin>>t;
			switch (t){
				case 'S':
				S=point(i,j);
				board[i][j]=true;
				break;
				case 'D':
				D=point(i,j);
				board[i][j]=true;
				break;
				case 'X':
				board[i][j]=false;
				break;
				case '.':
				board[i][j]=true;
				break;
			}
		}
	}
}
